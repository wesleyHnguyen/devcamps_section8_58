**************************************************************************
*************************** Authentication, User and Permission Part 2****

****************************************************************************
******************** 53. Bootcamp & User relationship *********************
/model/Bootcamp.js:
....
....
  user: {
        type: mongoose.Schema.ObjectId,
        ref: 'User',
        required: true
      }

/controller/bootcamp.js:
// Check for published bootcamp
    const publishedBootcamp = await Bootcamp.findOne({user: req.user.id});

    // If the user is not an admin. They can only add one bootcamp
    if(publishedBootcamp && req.user.role !== 'admin') {
        return next(
            new ErrorResponse(`The user with ID ${req.user.id} has already published a bootcamp`, 400)
        );
    }

**********************************************************************
*************** 54. Bootcamp ownership *******************************
/model/User.js:
user: {
        type: mongoose.Schema.ObjectId,
        ref: 'User',
        required: true
    }

/controller/bootcamp.js:

// Make sure user is bootcamp owner  
        if(bootcamp.user.toString() !== req.user.id && req.user.role !== 'admin'){
            return next(new ErrorResponse(`User ${req.params.id} is not authorized to update this bootcamp`, 401));

        }
/controller/courses.js:

// Make sure user is bootcamp owner  
    if(bootcamp.user.toString() !== req.user.id && req.user.role !== 'admin'){
        return next(
            new ErrorResponse(
                `User ${req.user.id} is not authorized to add a course to bootcamp ${bootcamp._id}`, 401));

    }

// Make sure user is course owner  
    if(course.user.toString() !== req.user.id && req.user.role !== 'admin'){
        return next(
            new ErrorResponse(
                `User ${req.user.id} is not authorized to update course ${course._id}`, 401));

    }

********************************************************************
********************** 56. Forgot password - Generate Token*********  
-- /model/User.js:

        // Encrypt password using bcrypt
        UserSchema.pre('save', async function(next) {
            ** if(!this.isModified('password')) {
                next();
            }**

            const salt = await bcrypt.genSalt(10);
            this.password = await bcrypt.hash(this.password, salt);
        });
----------------
        // Generate and hash password token
        UserSchema.methods.getResetPasswordToken = function() {
            // Generate tokens
            const resetToken = crypto.randomBytes(20).toString('hex');

            // Hash token and set to resetPasswordToken field 
            this.resetPasswordToken = crypto
                .createHash('sha256')
                .update(resetToken)
                .digest('hex');

            // Set expire
            this.resetPasswordExpire = Date.now() + 10 * 60 * 1000;

            return resetToken;
        }

-- /controller/user.js
        // Get token from model, create cookie and send response
        const sendTokentResponse = (user, statusCode, res) => {
            const token = user.getSignedJwtToken();

            const options = {
                expires: new Date(Date.now() + process.env.JWT_COOKIE_EXPIRE * 24 * 60 * 60 * 1000),
                httpOnly: true
            };

            if (process.env.NODE_ENV === 'production') {
                options.secure = true;
            }

            res
                .status(statusCode)
                .cookie('token', token, options)
                .json({ 
                    success: true, 
                    token
                });
        }

******************************************************************
***********************57. Forgot password and send email*********
-- package: nodemailer:
-- /utils/sendEmail.js:

-- using mailtrap: https://mailtrap.io -- mail provider

******************************************************************
************************* 58. Reset Password ************************
-- When resetting password succeed, resetPassword and resetPasswordExpire - will be remove - from database
-- /controller/auth.js:
    exports.resetPassword = asyncHandler( async (req, res, next) => {

        // Receive reset token from the email
        // hash it to compare with the resetPasswordToken from database
        const resetPasswordToken = crypto
            .createHash('sha256')
            .update(req.params.resettoken)
            .digest('hex');


        // Find a user from database that match two conditions:
        // 1. 
        const user = await User.findOne({
        *resetPasswordToken* -- from above - find the one with this resetPasswordToken, 
        resetPasswordExpire: {$gt: Date.now()}} - with the resetPasswordExpire = past + 10 min > now());

        // Then store the new password 
        user.password = req.body.password;
        // set all the temporary fields to undefined so they cannot be stored to database
        user.resetPasswordToken = undefined
        user.resetPasswordExpire = undefined

        // save the user to database
        await user.save();

        sendTokentResponse(user, 200, res);
        
    });

-- /routes/auth.js:
router.put('/resetpassword/:resettoken', resetPassword);

*****************************************************************************
************************ 59. Update User Details ****************************
-- /controller/auth.js:
exports.updatePassword = asyncHandler( async (req, res, next) => {

    // Get a user from database by the user id
    // remember to return the user password because
    // we set it by default is password : {select: false }
    // which tell mongoose that to exclude it from the result
    // so we use select('+password') to include it to the query result
    const user = await User.findById(req.user.id).select('+password');

            -- user:{
                        role: 'publisher',
                        _id: 5d7a514b5d2c12c7449be045,
                        name: 'John Doe',
                        email: 'john@gmail.com',
                        password: '$2a$10$dsfJoLt.R0HPrcKSqGHYD.Ud3t4WTSJ0sXdDw2FFHNqK.AbXAZwMy',
                        createdAt: 2021-04-01T08:31:51.158Z,
                        __v: 0
                    }



    // Check current password
    if(!(await user.matchPassword(req.body.currentPassword))) {
        return next(new ErrorResponse('Password is incorrect', 401));

    }

    user.password = req.body.newPassword; // Set password to the new password

    await user.save(); // save updated user to the database

    sendTokentResponse(user, 200, res);

});

**********************************************************************
*********************** 60. Admin User CRUD **************************
-- /controller/users.js.
-- /routes/users.js.
-- server.js.
        -- const users = require('./routes/users');
        -- app.use('/api/v1/users', users);


 